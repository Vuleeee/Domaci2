-----------------------------------obvz  menjaj username i password i localhost----------------------------------




const neo4j = require('neo4j-driver');

const uri = 'bolt://localhost:3000';
const user = 'StaCuDaJedem';
const password = '123qweasdzxc';//za bazu

async function searchMealsByIngredients(ingredients) {
  const driver = neo4j.driver(uri, neo4j.auth.basic(user, password));
  const session = driver.session();

  try {
    const result = await session.run(
      `
      MATCH (jelo:Jelo)-[:SADRZI]->(sastojak:Sastojak)
      WHERE sastojak.ime IN $ingredients
      RETURN jelo
      `,
      { ingredients }
    );
    const foundMeals = result.records.map(record => record.get('jelo').properties);
    return foundMeals;
  } catch (error) {
    console.error('Greška prilikom pretrage jela:', error);
    throw error;
  } finally {
    await session.close();
    await driver.close();
  }
}

const ingredientsToSearch = ['sastojak1', 'sastojak2'];// treba samo uzmes sta korisnik unosi u bar
searchMealsByIngredients(ingredientsToSearch)
  .then(foundMeals => {
    console.log('Pronađena jela:', foundMeals);
  })
  .catch(error => {
    console.error('Greška:', error);
  });
--------------------------povlacenje jela na osnovu sastojaka--------------------------------------------





const neo4j = require('neo4j-driver');
const uri = 'bolt://localhost:3000';
const user = 'StaCuDaJedem';
const password = '123qweasdzxc';

async function getMealsByRating(minRating) {
  const driver = neo4j.driver(uri, neo4j.auth.basic(user, password));
  const session = driver.session();

  try {
 
    const result = await session.run(
      `
      MATCH (jelo:Jelo)
      WHERE jelo.rejting >= $minRating
      RETURN jelo
      `,
      { minRating }
    );

   
    const mealsByRating = result.records.map(record => record.get('jelo').properties);
    return mealsByRating;
  } catch (error) {
    console.error('Greška prilikom pretrage jela po rejtingu:', error);
    throw error;
  } finally {
 
    await session.close();
    await driver.close();
  }
}
-------------------------izvlacenje jela na osnovu rejtinga---------------------------------------




const neo4j = require('neo4j-driver');
const uri = 'bolt://localhost:3000';
const user = 'StaCuDaJedem';
const password = '123qweasdzxc';

async function deleteMealByName(mealName) {
  const driver = neo4j.driver(uri, neo4j.auth.basic(user, password));
  const session = driver.session();

  try {
    await session.run(
      `
      MATCH (jelo:Jelo {ime: $mealName})
      DETACH DELETE jelo
      `,
      { mealName }
    );

    console.log(`Jelo '${mealName}' uspešno obrisano.`);
  } catch (error) {
    console.error('Greška prilikom brisanja jela:', error);
    throw error;
  } finally {
    // Zatvaranje sesije i vozača
    await session.close();
    await driver.close();
  }
}
---------------------------brisanje jela na osnovu imena jela--------------------------



const neo4j = require('neo4j-driver');

// Konfiguracija veze s bazom podataka
const uri = 'bolt://localhost:3000';
const user = 'StaCuDaJedem';
const password = '123qweasdzxc';

async function addMeal(mealData) {
  const driver = neo4j.driver(uri, neo4j.auth.basic(user, password));
  const session = driver.session();

  try {
    // Počni transakciju
    const result = await session.writeTransaction(async txc => {
      // Proveri da li svi sastojci već postoje u bazi
      const existingIngredientsResult = await txc.run(
        `
        UNWIND $ingredients AS ingredient
        MERGE (s:Sastojak {ime: ingredient})
        `,
        { ingredients: mealData.sastojci }
      );

      // Dodaj novo jelo
      const mealResult = await txc.run(
        `
        CREATE (jelo:Jelo {ime: $ime, opis: $opis, nacin_pripreme: $nacin_pripreme})
        WITH jelo
        UNWIND $sastojci AS sastojak
        MATCH (s:Sastojak {ime: sastojak})
        CREATE (jelo)-[:SADRZI]->(s)
        `,
        mealData
      );

      return mealResult;
    });

    console.log(`Jelo '${mealData.ime}' uspešno dodato.`);
  } catch (error) {
    console.error('Greška prilikom dodavanja jela:', error);
    throw error;
  } finally {
    await session.close();
    await driver.close();
  }
}
-----------------------------dodavanje jela u bazu kao i pravljenje veza izmedju sastojaka a i dodavanje novih sastojaka------------------------------



const neo4j = require('neo4j-driver');
const uri = 'bolt://localhost:3000';
const user = 'StaCuDaJedem';
const password = '123qweasdzxc';

async function updateMealRating(mealName, ratingChange) {
  const driver = neo4j.driver(uri, neo4j.auth.basic(user, password));
  const session = driver.session();

  try {
    const result = await session.run(
      `
      MATCH (jelo:Jelo {ime: $mealName})
      SET jelo.rejting = jelo.rejting + $ratingChange
      RETURN jelo.rejting AS newRating
      `,
      { mealName, ratingChange }
    );

    const newRating = result.records[0].get('newRating');
    console.log(`Rejting jela '${mealName}' ažuriran na ${newRating}.`);
  } catch (error) {
    console.error('Greška prilikom ažuriranja rejtinga jela:', error);
    throw error;
  } finally {
    await session.close();
    await driver.close();
  }
}



-----------------------submit rejtinga---------------------------------------